// <auto-generated />
using System;
using CirAnime.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CirAnime.Migrations
{
    [DbContext(typeof(CirAnimeContext))]
    [Migration("20200114204719_Pjob2")]
    partial class Pjob2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("CirAnime.Models.MediaInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("duration")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("live")
                        .HasColumnType("INTEGER");

                    b.Property<string>("thumbnail")
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("MediaInfo");
                });

            modelBuilder.Entity("CirAnime.Models.ProcessingJob", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalFile")
                        .HasColumnType("TEXT");

                    b.Property<int>("Progress")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UploadEntryID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("UploadEntryID");

                    b.ToTable("ProcessingJob");
                });

            modelBuilder.Entity("CirAnime.Models.Source", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MediaInfoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("bitrate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("contentType")
                        .HasColumnType("TEXT");

                    b.Property<int>("quality")
                        .HasColumnType("INTEGER");

                    b.Property<string>("url")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("MediaInfoID");

                    b.ToTable("Source");
                });

            modelBuilder.Entity("CirAnime.Models.TextTrack", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MediaInfoID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("contentType")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("url")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("MediaInfoID");

                    b.ToTable("TextTrack");
                });

            modelBuilder.Entity("CirAnime.Models.UploadEntry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MediaInfoID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("MediaInfoID");

                    b.HasIndex("UserID");

                    b.ToTable("UploadEntry");
                });

            modelBuilder.Entity("CirAnime.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("DiscordID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CirAnime.Models.ProcessingJob", b =>
                {
                    b.HasOne("CirAnime.Models.UploadEntry", "UploadEntry")
                        .WithMany("ProcessingJobs")
                        .HasForeignKey("UploadEntryID");
                });

            modelBuilder.Entity("CirAnime.Models.Source", b =>
                {
                    b.HasOne("CirAnime.Models.MediaInfo", null)
                        .WithMany("sources")
                        .HasForeignKey("MediaInfoID");
                });

            modelBuilder.Entity("CirAnime.Models.TextTrack", b =>
                {
                    b.HasOne("CirAnime.Models.MediaInfo", null)
                        .WithMany("textTracks")
                        .HasForeignKey("MediaInfoID");
                });

            modelBuilder.Entity("CirAnime.Models.UploadEntry", b =>
                {
                    b.HasOne("CirAnime.Models.MediaInfo", "MediaInfo")
                        .WithMany()
                        .HasForeignKey("MediaInfoID");

                    b.HasOne("CirAnime.Models.User", "User")
                        .WithMany("UploadEntrys")
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
